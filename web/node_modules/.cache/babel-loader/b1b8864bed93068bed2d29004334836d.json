{"ast":null,"code":"import { call, select, put, all, takeLatest } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { formatPrice } from '../../../util/format';\nimport { addToCartSuccess, updateAmountSuccess } from './actions';\nimport { toast } from 'react-toastify';\n\nfunction* addToCart({\n  id\n}) {\n  const productExists = yield select(state => state.cart.find(p => p.id === id));\n  const stock = yield call(api.get, `/stock/${id}`);\n  const stockAmount = stock.data.amount;\n  const currentAmount = productExists ? productExists.amount : 0;\n  const amount = currentAmount + 1;\n\n  if (amount > stockAmount) {\n    toast.error('Sorry, This Item is temporarily out of stock!');\n    return;\n  }\n\n  if (productExists) {\n    yield put(updateAmountSuccess(id, amount));\n  } else {\n    const response = yield call(api.get, `/products/${id}`);\n    const data = { ...response.data,\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price)\n    };\n    yield put(addToCartSuccess(data));\n  }\n} // which action to listen to and which method to fire\n\n\nexport default all([takeLatest('@cart/ADD_REQUEST', addToCart)]);","map":{"version":3,"sources":["/Users/danielsimoes/workspace/coffe/src/store/modules/cart/sagas.js"],"names":["call","select","put","all","takeLatest","api","formatPrice","addToCartSuccess","updateAmountSuccess","toast","addToCart","id","productExists","state","cart","find","p","stock","get","stockAmount","data","amount","currentAmount","error","response","priceFormatted","price"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,UAAjC,QAAmD,oBAAnD;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAEA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,WAAtD;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AAEA,UAAUC,SAAV,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA4B;AAC1B,QAAMC,aAAa,GAAG,MAAMX,MAAM,CAACY,KAAK,IACtCA,KAAK,CAACC,IAAN,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACL,EAAF,KAASA,EAA9B,CADgC,CAAlC;AAIA,QAAMM,KAAK,GAAG,MAAMjB,IAAI,CAACK,GAAG,CAACa,GAAL,EAAW,UAASP,EAAG,EAAvB,CAAxB;AAEA,QAAMQ,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAA/B;AACA,QAAMC,aAAa,GAAGV,aAAa,GAAGA,aAAa,CAACS,MAAjB,GAA0B,CAA7D;AAEA,QAAMA,MAAM,GAAGC,aAAa,GAAG,CAA/B;;AAEA,MAAID,MAAM,GAAGF,WAAb,EAA0B;AACxBV,IAAAA,KAAK,CAACc,KAAN,CAAY,+CAAZ;AACA;AACD;;AAED,MAAIX,aAAJ,EAAmB;AAEjB,UAAMV,GAAG,CAACM,mBAAmB,CAACG,EAAD,EAAKU,MAAL,CAApB,CAAT;AACD,GAHD,MAGO;AACL,UAAMG,QAAQ,GAAG,MAAMxB,IAAI,CAACK,GAAG,CAACa,GAAL,EAAW,aAAYP,EAAG,EAA1B,CAA3B;AAEA,UAAMS,IAAI,GAAG,EACX,GAAGI,QAAQ,CAACJ,IADD;AAEXC,MAAAA,MAAM,EAAE,CAFG;AAGXI,MAAAA,cAAc,EAAEnB,WAAW,CAACkB,QAAQ,CAACJ,IAAT,CAAcM,KAAf;AAHhB,KAAb;AAMA,UAAMxB,GAAG,CAACK,gBAAgB,CAACa,IAAD,CAAjB,CAAT;AACD;AACF,C,CAED;;;AACA,eAAejB,GAAG,CAAC,CACjBC,UAAU,CAAC,mBAAD,EAAsBM,SAAtB,CADO,CAAD,CAAlB","sourcesContent":["import { call, select, put, all, takeLatest } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { formatPrice } from '../../../util/format';\n\nimport { addToCartSuccess, updateAmountSuccess } from './actions';\nimport { toast } from 'react-toastify';\n\nfunction* addToCart({ id }) {\n  const productExists = yield select(state =>\n    state.cart.find(p => p.id === id)\n  );\n\n  const stock = yield call(api.get, `/stock/${id}`);\n\n  const stockAmount = stock.data.amount;\n  const currentAmount = productExists ? productExists.amount : 0;\n\n  const amount = currentAmount + 1;\n\n  if (amount > stockAmount) {\n    toast.error('Sorry, This Item is temporarily out of stock!');\n    return;\n  }\n\n  if (productExists) {\n\n    yield put(updateAmountSuccess(id, amount));\n  } else {\n    const response = yield call(api.get, `/products/${id}`);\n\n    const data = {\n      ...response.data,\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price),\n    };\n\n    yield put(addToCartSuccess(data));\n  }\n}\n\n// which action to listen to and which method to fire\nexport default all([\n  takeLatest('@cart/ADD_REQUEST', addToCart),\n]);\n"]},"metadata":{},"sourceType":"module"}